@icon "star"
@color "blue"
@ShowInShareSheet [
	safariwebpage,
	string,
	url
]
@ImportQuestion q:Splash1  "Privacy Policy" defaultValue=`This shortcut uses a serverless
function to to interface with twitter's
API to pull the details of the tweet.
Besides the tweet's id, no other data
is sent to the function and the 
raw response from Twitter is sent back
to this shortcut. Absolutely no data
is being logged by the server function.

The Serverless funtion is created 
using Cloudflare Workers -
https://workers.cloudflare.com/
and below is the actual code if
you want to review

-------
addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request))
})
const twitterStatus = async request => {  
    const ourl = new URL(request.url) 
    const id = ourl.searchParams.get('id') 
    const url = 'https://api.twitter.com/1.1/statuses/show.json?tweet_mode=extended&id='+id
    const resp = await fetch(url, {
      headers: {
        Authorization: ('Bearer ' + BEARER_TOKEN)
      }
    })
    const json = await resp.json()
    return new Response(JSON.stringify(json),{status:200})
}
async function handleRequest(request) {
    return await twitterStatus(request)
}
-------
`

Comment q:Splash1

SetVariable v:argv

@set debug false
@set mock false
@import "../../lib/helpers.scpl"

Comment "\n\n\n\n[=] Metadata ::.."
Dictionary {
    shortcut    : "Go Fetch From Twitter",
    author      : "@supermamon",
    version     : "1.1.0",
    settings    : {
        updater : {
            ID: 3939    
        },
        apiEndpoint: "https://gfftwitter.supermamon.workers.dev/"
    },
    changes     : {
        "v1.0.0": "Initial release",
        "v1.1.0": "Switch api endpoint server for faster performance"
    }
} -> mv:meta
GetVariable mv:meta:shortcut -> v:self
GetVariable mv:meta:settings -> v:opt

Dictionary items={"key":"val"}
GetType -> v:lDictionary

#  function detection
GetVariable v:argv
GetType
If Equals v:lDictionary
    GetVariable v:argv:fn -> v:function
Otherwise
    @call {fn:main}
    ExitShortcut
End

# function list
GetVariable v:function
If Equals "main"
    Text -> mv:msg
    |This shortcut is an addon to Media Mutt.
    |Download Media Mutt and register
    |this addon.
    ShowAlert title=v:self message=mv:msg
    @call {
        fn          : checkForUpdate,
        name        : v:self,
        id          : v:opt:"updater.ID",
        version     : mv:meta:version,
        noUpdAlert  : "show",
    }
    ExitShortcut
End
GetVariable v:function
If Equals "register"
    GetVariable v:self
    ExitShortcut
End
GetVariable v:function
If Equals "canProcessURL"
    @dbgAlert "Entered canProcessURL with \(v:argv:url)"
    GetVariable v:argv:url
    MatchText pattern="https:\\/\\/twitter\\.com\\/[\\w\\d]+\\/status\\/\\d+" caseSensitive=false -> v:matches
    Count Items
    If "Is Greater Than" 0
        Number 1
    Otherwise
        Number 0
    End
    ExitShortcut
End
GetVariable v:function
If Equals "fetchMedia"
    @dbgAlert "Entered fetchMedia with \(v:argv:url)"
#@callExt "Media Mutt" {fn:showMessage message="[\(v:self)] Inspecting url"}
    GetVariable v:argv:url
    ReplaceText (
        findText="\\?.*$",
        replaceWith="",
        caseSensitive=false
        regularExpression=true
    ) -> mv:url_no_qs
    MatchText pattern="\\d+$" caseSensitive=false -> v:status_id
    URL "\(v:opt.apiEndpoint)?id=\(v:status_id)"
    GetContentsofURL (
        advanced=true,
        method="GET",
    )
    GetDictionaryfromInput -> v:tweet
Text -> v:js `
<script type="text/javascript">
var tweet = \(v:tweet)
    var media_urls = []
    
    function getMediaUrls(tweet) {

      if (!tweet.extended_entities.media) return


      var murls = tweet.extended_entities.media.map( media => {

        var media_type = media.type=='animated_gif'?'video':media.type

        switch (media_type) {
          case 'video':

            var variants = media.video_info.variants.filter( variant => variant.content_type=='video/mp4')

            return variants[0].url
            break;
          case 'photo':
            var sizes = ['large','medium','small','thumb']
            var avail = sizes.filter( size => {
              return !!media.sizes[size]
            })
            var max = avail[0]
            var media_url = media.media_url_https
            return media_url
            break;
          default:
            return null
        }
    
      })
      murls = murls.filter( item => !!item)
      return murls;
    }
    
    media_urls = getMediaUrls(tweet)

    document.write(JSON.stringify({
      urls:media_urls
    }))
</script>
`
    URL "data:text/html,\(v:js)"
    GetContentsofWebpage -> mv:resp
    GetVariable mv:resp{as:Text}
    GetDictionaryfromInput -> mv:d
    GetVariable mv:d:urls
    RepeatwithEach
      GetContentsofURL 
    End -> v:downloaded_media
    ExitShortcut
End
GetVariable v:function
@import "../../lib/checkForUpdate-fn.scpl"
#
ShowAlert title=v:self message="(addon) Invalid function call - \(v:function)" showCancelButton=false
Nothing
ExitShortcut
